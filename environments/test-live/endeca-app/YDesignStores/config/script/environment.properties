
eac.host=ormdex05.ydesigngroup.net
eac.port=8888

itl.host=ormdex05.ydesigngroup.net
workbench.host=ormdex05.ydesigngroup.net
workbench.port=8006

authoring.mdex.host=ormdex05.ydesigngroup.net
authoring.mdex.port=16002

appserver.live.host=ormdex05.ydesigngroup.net
appserver.live.port=8006

live.mdex.host=ormdex05.ydesigngroup.net
live.mdex.port=16000

logserver.host=ormdex05.ydesigngroup.net
logserver.port=16010

forge.log.level=-vw


#
#
# This file contains overrides to the XML configuration file(s). Two types of 
# overrides can be specified:
#
# 1. [beanname].[field] = [value]
# 	This style of override specifies the name of an object and field
#	and overrides the value specified for that field in the XML config
#	file. For example:
#		Dgraph1.port = 16000
#		ITLHost.hostName = itl.mycompany.com
#
# 2. [token] = [value]
#	This style of override specifies the name of a token defined in the
#	XML config file and substitutes the specified value for that token.
#	For example, in the AppConfig.xml, a user might specify a host with
#	two tokens:
#		<host id="ITLHost" hostName="${itl.hostname}" 
#			port="${itl.port}" />
#	In this override file, values can be assigned to those tokens:
#		itl.hostname = itl.mycompany.com
#		itl.port = 8888
#
#
# NOTE: Entries specified in this override file will be matched against both
# override methods defined above. In both cases, if a token does not match,
# warnings are logged but ignored. This means that both override approaches
# can be used concurrently, though care should be taken if defining token
# names that may coincide with bean names. For example, defining a token like
# ${Forge.tempDir} will cause the corresponding value in this file to match,
# and override, both the token and the tempDir field of the Forge component.
#
#
